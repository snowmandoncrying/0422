package web.bean.dao;
import java.sql.*;
import web.bean.dto.BoardDTO;
import web.bean.dto.BoardFileDTO;

import java.util.*; 

public class BoardDAO {

	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	private String sql = null;
	
	public List<BoardFileDTO> getBoardFileList(int boardnum) {	// 첨부파일 목록을 가져옴 - 글 번호만 매개변수로 받음
		List<BoardFileDTO> list = new ArrayList<>();	// 배열로 받아주는 듯
		
		try {
			conn = OracleConnection.getConnection();	// 데이트베이스와 연결
	        sql = "select * from boardfile where boardnum=?"; // 주어진 게시글 번호에 해당하는 파일 목록을 가져오기 위한 sql 쿼리 실행, boardnum이라는 매개변수화된  쿼리 사용
	        pstmt = conn.prepareStatement(sql);	// sql문을 사용하여 매개변수화된 쿼리를 전달하기 위한 객체 생성
	        pstmt.setInt(1, boardnum);	// 값을 설정해 해당 게시글 번호에 대한 파일 목록을 가져옴
	        rs = pstmt.executeQuery();	// sql 쿼리 실행, 결과를 담는 ResultSet 객체를 가져옴
	        
	        while(rs.next()) {	// 결과 집합에서 가 행을 반복하여 처리
	        	BoardFileDTO boardFileDTO = new BoardFileDTO();	// 새로운 BoardFileDTO 객체 생성 > 각 파일의 정보를 담음
	        	boardFileDTO.setNum(rs.getInt("num"));	// 결과 집합에서 num을 가져와 객체의 num 속성에 설정
	        	boardFileDTO.setBoardnum(rs.getInt("boardnum"));	// 객체의 boardnum 속성에 설정
	        	boardFileDTO.setFilename(rs.getString("filename"));	// 객체의 filename 속성에 설정
	        	list.add(boardFileDTO);	// BoardFileDTO 객체를 리스트에 추가
	        }
	      
	      }catch(Exception e) {
	         e.printStackTrace();
	      }finally {
	         OracleConnection.close(rs, pstmt, conn);	// 데이터베이스 관련 객체를 닫음
	      } 
			return list;	// 파일 목록이 담긴 리스트를 반환
	}
	
	public void updateFile(int count , int boardnum) {	// 첨부파일 업데이트- 보드파일의 값을 카운트 매개변수로 넘겨받음 (업데이트-수정한다는 뜻)
	      try {		// // board 테이블에서 num 값이 주어진 boardnum과 일치하는 레코드의 boardfile 값을 업데이트 하기 위함
	         conn = OracleConnection.getConnection();
	         sql = "update board set boardfile=? where num=?";	
	         pstmt = conn.prepareStatement(sql);
	         pstmt.setInt(1, count);	// 업데이트할 파일의 새로운 값
	         pstmt.setInt(2, boardnum);	// 업데이트할 게시글의 번호
	         pstmt.executeUpdate();
	      }catch(Exception e) {
	         e.printStackTrace();
	      }finally {
	         OracleConnection.close(rs, pstmt, conn);
	      }   
	   }
	
	public void insertFile(BoardFileDTO dto) {	// 새로운 첨부파일을 데이터베이스에 추가 - 객체에는 새로 추가할 첨부파일의 정보가 담김
		try {	// 새로운 레코드 추가, 새로운 첨부파일 등록
			conn = OracleConnection.getConnection();
			sql = "insert into boardfile values(boardfile_seq.nextval,?,?)";	// dto에 있는 값을 보드파일에 인서트 시키는 것
			// 시퀀스를 사용하여 새로운 파일의 고유번호 생성 > 이후엔 ?는 dto 객체 있는 값으로 대체됨
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, dto.getBoardnum());	// 새로운 파일이 속한 게시글의 번호
			pstmt.setString(2, dto.getFilename());	// 새로운 파일의 파일명
			pstmt.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			OracleConnection.close(rs, pstmt, conn);
		}
	}
	
	public int maxNum() {	// 가장 큰 글번호를 찾아서 반환하는 메서드 - 반환 값은 int, 다른 곳에서 사용 가능
				// 즉 메서드가 값을 반환하는 것과 아닌 것의 차이는 호출하는 쪽에서 해당 값을 사용할 수 있는지 없는지에 따라 달라짐 - 있으면 반환
		int result = 0;	// 변수 0으로 초기화
		try {
			conn = OracleConnection.getConnection();
			pstmt = conn.prepareStatement("select max(num) from board"); 
			rs = pstmt.executeQuery();
			if (rs.next()) {	// next 메서드가 true를 반환하는 경우 - 다음 행이 존재할 경우, 행의 첫번째 열에 있는 값을 가져와서 result 변수에 저장
				result = rs.getInt(1);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			OracleConnection.close(rs, pstmt, conn);
		}
		return result;	// 최대 글번호를 나타내는 result 변수 반환 > 가장 큰 글 번호를 찾아 반환하고 호출한 쪽에서 사용할 수 있게 됨
	}
	
	public void insertArticle(BoardDTO article) {	// 새로운 게시글을 데이터베이스에 등록 - dto객체를 매개변수로 받음
		int num=article.getNum();	// 입력된 글의 번호를 가져옴
		int ref=article.getRef();	// 입력된 글의 그룹 번호를 가져옴
		int re_step=article.getRe_step();	// 입려된 글의 답변 순서를 가져옴
		int re_level=article.getRe_level();	// 입력된 글의 답변 레벨을 가져옴
		int number=0; // 변수 선언 후 0으로 초기화, 새 글일 등록하는 경우 num=0, ref=1, re_step=0, re_level=0
		
		try {
			conn = OracleConnection.getConnection();
			pstmt = conn.prepareStatement("select max(num) from board");	// 글번호의 최댓값을 가져오는 쿼리 , 하나의 메서드에 여러 쿼리문 가능~
			rs = pstmt.executeQuery();
			
			if (rs.next()) {	// 게시판에 아예 글이 없는 경우 false 가 나와서 화면에 하나도 안나옴
				number=rs.getInt(1)+1;	// 선생님것 기준으로 7+1=8. 맥스넘은 아예 글이 없다면 하나도 안 나옴. 당연함 최대값이니까. (맥스값은 오로지 새 글을 작성할 때 필요한 것)
			}else {	
				number=1; 	// 그니까 결과가 존재하면 값을 number에 할당하고 1을 더함. 결과가 없다면 number을 1로 설정
			}
			
			if (num!=0) { // 입력된 글번호가 0이 아니면(답글쓰기일 때) if문 실행, 0일 경우(새 글) else문 실행
				// 선생님것 기준으로 num=8, ref=8, re_step=0, re_level=0 
				sql="update board set re_step=re_step+1 where ref= ? and re_step > ?";	// 답글이 달렸을 때 기존의 답글에 1을 더해줌 > 그룹을 바꿔주어 다른 곳에 답글이 달리지 않게 하기 위해서
				// 답글이 달린 경우, 해당 그룹 답글의 re_step 값을 증가 > 답글을 추가할 때 그 이후의 답글들의 순서를 조정해줌
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, re_step);
				pstmt.executeUpdate();
				re_step=re_step+1;	// 답글쓰기일 경우 step과 level 둘 다 1,1로 증가 // 답글에 답글을 작성할 경우 2,2가 됨
				re_level=re_level+1;
			}else{ 	
				ref=number;
				re_step=0;
				re_level=0;	// 새 글일 경우 num=0, ref=8, step=0, level=0 의 결과가 나옴
			}
 
			sql = "insert into board(num,writer,email,subject,passwd,reg_date,"; // 업데이트를 먼저 하고 인서트하는 것 - 최종적으로 인서트 - 값을 넣어줌
			// 부산은 8,8,1,1 서울은 8,8,2,1 - 새 답글이 들어가면 업데이트를 통해서 re_step을 +1 시켜주는 것이다 (기존 것들의 스텝을 하나씩 높여주는것)
			// 최근에 작성된 답글을 위로 올려주는 것
			sql+="ref,re_step,re_level,content,ip) values(board_seq.NEXTVAL,?,?,?,?,?,?,?,?,?,?)";	// 쿼리에 값을 바인딩, 새 글을 데이터베이스에 삽입
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, article.getWriter());
			pstmt.setString(2, article.getEmail());
			pstmt.setString(3, article.getSubject());
			pstmt.setString(4, article.getPasswd());
			pstmt.setTimestamp(5, article.getReg_date());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, re_step);
			pstmt.setInt(8, re_level);
			pstmt.setString(9, article.getContent());
			pstmt.setString(10, article.getIp());
			pstmt.executeUpdate();	// 쭉 들어가고 업데이트 되어 글이 작성되는 것이다. ref 값이 모두 동일하게 만들기 위해 이 모든 것을 함. 그룹을 통해 겹치지 않도록
		} catch(Exception ex) {
			ex.printStackTrace();
		} finally {
			OracleConnection.close(rs, pstmt, conn);
		}
	}	// 새로운 게시글 등록 - num이 0이 됨 > 글번호를 새로 생성 - maxNum() 메서드로 현재 최대 글 번호를 가져와 새로운 번호를 생성 > 그룹번호를 새로운 번호로 설정
		// 답글 작성 - num이 아닌 값을 가짐 > 해당 그룹의 답글 순서를 조정 - re_step을 증가 > 그룹번호와 답글 순서, 답글레벨 설정
